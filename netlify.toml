# Netlify Configuration for FertiVision
# Production-ready deployment settings

[build]
  # Build command (not needed for static site, but can be used for preprocessing)
  command = "echo 'Building FertiVision for production...'"
  
  # Publish directory - where the static files are located
  publish = "."
  
  # Functions directory (if using Netlify Functions in the future)
  functions = "netlify/functions"

[build.environment]
  # Node.js version for build process
  NODE_VERSION = "18"

# Redirect rules for Single Page Application (SPA)
[[redirects]]
  # Handle client-side routing - redirect all routes to index.html
  from = "/*"
  to = "/index.html"
  status = 200
  conditions = {Role = ["admin", "editor"], Country = ["US"]}

# Security headers
[[headers]]
  for = "/*"
  [headers.values]
    # Security headers
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
    
    # Content Security Policy
    Content-Security-Policy = """
      default-src 'self';
      script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://api.groq.com https://openrouter.ai;
      style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://fonts.googleapis.com;
      font-src 'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com;
      img-src 'self' data: blob: https:;
      connect-src 'self' https://api.groq.com https://openrouter.ai;
      media-src 'self' data: blob:;
      object-src 'none';
      base-uri 'self';
      form-action 'self';
      frame-ancestors 'none';
    """
    
    # CORS headers for API requests
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
    Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With"

# Cache optimization for static assets
[[headers]]
  for = "/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.css"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.js"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.png"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.jpg"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.jpeg"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.svg"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "*.ico"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

# API proxy for external services (optional - for avoiding CORS issues)
[[redirects]]
  from = "/api/groq/*"
  to = "https://api.groq.com/:splat"
  status = 200
  force = true
  headers = {X-From = "Netlify"}

[[redirects]]
  from = "/api/openrouter/*"
  to = "https://openrouter.ai/api/:splat"
  status = 200
  force = true
  headers = {X-From = "Netlify"}

# Environment-specific settings
[context.production]
  [context.production.environment]
    NODE_ENV = "production"
    VITE_API_PROVIDER = "groq"
    # API keys should be set in Netlify dashboard, not here

[context.deploy-preview]
  [context.deploy-preview.environment]
    NODE_ENV = "staging"
    VITE_API_PROVIDER = "demo"

[context.branch-deploy]
  [context.branch-deploy.environment]
    NODE_ENV = "development"
    VITE_API_PROVIDER = "demo"

# Form handling (if needed for contact forms)
[build.processing]
  skip_processing = false

[build.processing.css]
  bundle = true
  minify = true

[build.processing.js]
  bundle = true
  minify = true

[build.processing.html]
  pretty_urls = true

[build.processing.images]
  compress = true

# Plugin configuration
[[plugins]]
  package = "@netlify/plugin-sitemap"

[[plugins]]
  package = "netlify-plugin-minify-html"
  [plugins.inputs]
    contexts = ["production"]

# Edge functions (if needed for advanced processing)
# [[edge_functions]]
#   function = "image-processor"
#   path = "/api/process-image"

# Split testing (A/B testing) configuration
# [split_testing]
#   [split_testing.test_1]
#     path = "/"
#     branches = ["main", "feature-branch"]

# Large Media configuration (for handling large image files)
[lfs]
  # Enable Git LFS for large files
  enabled = false

# Dev server configuration for local development
[dev]
  command = "python -m http.server 8000"
  port = 8000
  publish = "."
  autoLaunch = true

# Custom error pages
[[redirects]]
  from = "/404"
  to = "/404.html"
  status = 404

[[redirects]]
  from = "/500"
  to = "/500.html"
  status = 500

# Prerendering for better SEO (optional)
# [build.processing.skip_processing]
#   paths = ["/admin/*"]

# Analytics and monitoring
# [analytics]
#   provider = "google"
#   google_analytics = "GA_TRACKING_ID"

# Performance optimizations
[build.processing.images]
  compress = true
  quality = 85
  progressive = true

# Security scanning
[security]
  # Enable security headers
  headers = true
  
  # Content scanning
  scan_content = true

# Bandwidth and usage limits
[limits]
  # Set reasonable limits for production
  bandwidth = "100GB"
  build_minutes = "300"

# Custom domains and SSL
# [ssl]
#   certificate_type = "lets_encrypt"
#   force_ssl = true

# Webhook notifications
# [[notifications]]
#   type = "slack"
#   event = "deploy-succeeded"
#   channel = "#deployments"
#   webhook = "https://hooks.slack.com/..."

# Branch-specific settings
[context.main]
  [context.main.environment]
    ENVIRONMENT = "production"
    VITE_API_PROVIDER = "groq"

[context.develop]
  [context.develop.environment]
    ENVIRONMENT = "development"
    VITE_API_PROVIDER = "demo"

# Custom build hooks
# [build.hooks]
#   before_build = "echo 'Starting FertiVision build...'"
#   after_build = "echo 'FertiVision build complete!'"

# Dependency management
[build.ignore]
  # Ignore these files/directories during build
  command = "git diff --quiet $CACHED_COMMIT_REF $COMMIT_REF -- package.json package-lock.json"
